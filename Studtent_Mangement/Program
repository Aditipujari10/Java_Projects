package sampleTest.program;

import java.util.Scanner;
import java.util.List;
import java.util.ArrayList;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
public class Program {
	public static void addStudent(Scanner sc) {
		Student student = new Student();
		student.accept(sc);
		String sql = "INSERT INTO student(name,email,department) VALUES(?,?,?)";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement insertStatement = connection.prepareStatement(sql)){
				insertStatement.setString(1, student.getName());
				insertStatement.setString(2, student.getEmail());
				insertStatement.setString(3, student.getDepartment());
				
				insertStatement.executeUpdate();
				System.out.println("Student Registred Successfully......");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void addCourses(Scanner sc) {
		Course course = new Course();
		course.accept(sc);
		String sql = "INSERT INTO course(title,instructor,credits) VALUES(?,?,?)";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement insertStatement = connection.prepareStatement(sql)){
				insertStatement.setString(1, course.getTitle());
				insertStatement.setString(2, course.getInstructor());
				insertStatement.setDouble(3, course.getCredits());
				
				insertStatement.executeUpdate();
				System.out.println("Course Added Successfully......");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void displayAllCourses() {
				String sql = "SELECT * FROM course";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement selectStatement = connection.prepareStatement(sql)){
				ResultSet rs = selectStatement.executeQuery();
				List<Course> list = new ArrayList<Course>();
				while(rs.next()) {
					Course course = new Course();
					course.setCourseId(rs.getInt(1));
					course.setTitle(rs.getString(2));
					course.setInstructor(rs.getString(3));
					course.setCredits(rs.getInt(4));
					list.add(course);
				}
				list.forEach(l -> System.out.println(l));
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static Student loginStudent(Scanner sc) {
		Student student = new Student();
		System.out.println("Enter Student Id : ");
		student.setStudentId(sc.nextInt());
		System.out.println("Enter Email : ");
		student.setEmail(sc.next());
		
		String sql = "SELECT * FROM student WHERE studentid=? AND email = ?";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement selectStatement = connection.prepareStatement(sql)){
				selectStatement.setInt(1, student.getStudentId());
				selectStatement.setString(2, student.getEmail());
				ResultSet rs = selectStatement.executeQuery();
				while(rs.next()) {
					student.setName(rs.getString(2));
					student.setDepartment(rs.getString(4));
					return student;
				}
				
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return null;
	}
	
	public static void courseEnroll(Scanner sc,int studentId) {
		displayAllCourses();
		Course course = new Course();
		System.out.println("Enter CourseId : ");
		int courseId = sc.nextInt();
		
		String sql = "INSERT INTO enrollment(studentid, courseid) VALUES(?, ?)";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement insertStatement = connection.prepareStatement(sql)){
				insertStatement.setInt(1, studentId);
				insertStatement.setInt(2, courseId);
				insertStatement.executeUpdate();
				System.out.println("Enrollment is Done......(:");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void displayEnrollCourses(int studentId) {
		String sql = "SELECT c.courseid, c.title, c.instructor, c.credits FROM enrollment e inner JOIN course c ON e.courseid = c.courseid WHERE e.studentid = ?";
		try(Connection connection = DbUtil.getConnection()){
			try(PreparedStatement insertStatement = connection.prepareStatement(sql)){
				
				insertStatement.setInt(1, studentId);
				ResultSet rs = insertStatement.executeQuery();
				boolean found = false;
				System.out.println("Enrolled Courses:");
				while (rs.next()) {
					int courseId = rs.getInt("courseid");
					String title = rs.getString("title");
					String instructor = rs.getString("instructor");
					int credits = rs.getInt("credits");
					
					System.out.printf("ID: %d | Title: %s | Instructor: %s | Credits: %d%n",
							courseId, title, instructor, credits);
					found = true;
				}
				
				if (!found)
					System.out.println("No enrollments found.");
			
				System.out.println("Enrollment is Done......(:");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	public static void searchCourseByTitle(Scanner sc) {
		System.out.print("Enter keyword to search course title: ");
		String keyword = sc.next(); // You can also use nextLine() for multi-word input

		String sql = "SELECT * FROM course WHERE title LIKE ?";
		
		try (Connection connection = DbUtil.getConnection()) {
			try (PreparedStatement stmt = connection.prepareStatement(sql)) {
				stmt.setString(1, "%" + keyword + "%"); // Add wildcards for LIKE
				
				ResultSet rs = stmt.executeQuery();
				
				boolean found = false;
				System.out.println("Matching Courses:");
				while (rs.next()) {
					int courseId = rs.getInt("courseid");
					String title = rs.getString("title");
					String instructor = rs.getString("instructor");
					int credits = rs.getInt("credits");
					
					System.out.printf("ID: %d | Title: %s | Instructor: %s | Credits: %d%n",
							courseId, title, instructor, credits);
					found = true;
				}
				
				if (!found)
					System.out.println("⚠️ No matching courses found.");
				
			}
		} catch (SQLException e) {
			System.out.println("❌ Error while searching courses.");
			e.printStackTrace();
		}
	}
	
	public static void displayCoursesWithCreditsGreaterThan(Scanner sc) {
		System.out.print("Enter credit threshold (N): ");
		int creditThreshold = sc.nextInt();

		String sql = "SELECT * FROM course WHERE credits > ?";

		try (Connection connection = DbUtil.getConnection()) {
			try (PreparedStatement stmt = connection.prepareStatement(sql)) {
				stmt.setInt(1, creditThreshold);

				ResultSet rs = stmt.executeQuery();

				boolean found = false;
				System.out.println("Courses with credits greater than " + creditThreshold + ":");
				while (rs.next()) {
					int courseId = rs.getInt("courseid");
					String title = rs.getString("title");
					String instructor = rs.getString("instructor");
					int credits = rs.getInt("credits");

					System.out.printf("ID: %d | Title: %s | Instructor: %s | Credits: %d%n",
							courseId, title, instructor, credits);
					found = true;
				}

				if (!found)
					System.out.println("⚠️ No courses found with credits greater than " + creditThreshold);

			}
		} catch (SQLException e) {
			System.out.println("❌ Error while fetching courses.");
			e.printStackTrace();
		}
	}


	public static int menuList(Scanner sc) {
		int choice;
		System.out.println("-----------------------------");
		System.out.println("Memu :");
		System.out.println("0.Exit");
		System.out.println("1.Register New Student");
		System.out.println("2.Add New Course");
		System.out.println("3.Display All Courses");
		System.out.println("4.Student Login");
		System.out.println("5.Enroll in Course");
		System.out.println("6.View My Enrollments");
		System.out.println("7.Search Course by Title");
		System.out.println("8.Display Courses with Credits > N");
		System.out.println("9.Logout");
		System.out.println("Enter your choice : ");
		choice = sc.nextInt();
		return choice;
	}
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		Student student = null;
		int choice;
		while((choice=menuList(sc))!=0) {
			switch(choice) {
				case 1 : {
					addStudent(sc);
					break;
				}
				case 2 :{
					addCourses(sc);
					break;
				}
				case 3:{
					displayAllCourses();
					break;
				}
				case 4:{
					student = loginStudent(sc);
					if(student!=null) {
						System.out.println("Login successful...");
					}
					else {
						System.out.println("Invalid Credential.");
					}
					break;
				}
				case 5:{
					if(student!=null) {
						courseEnroll(sc,student.getStudentId());
					}
					else {
						System.out.println("You need to login first!!");
					}
					break;
				}
				case 6:{
					if(student!=null) {
						displayEnrollCourses(student.getStudentId());
					}
					else {
						System.out.println("You need to login first ");
					}
					break;
				}
				case 7:{
					if(student!=null) {
						searchCourseByTitle(sc);
					}
					else {
						System.out.println("You need to login first ");
					}
					break;
				}
				case 8:{
					if(student!=null) {
						displayCoursesWithCreditsGreaterThan (sc);
					}
					else {
						System.out.println("You need to login first ");
					}
					break;
				}
				case 9:{
					student = null;
					break;
				}
				default:{
					System.out.println("Wrong choice....!!!");
				}
			}
		}

	}

}
